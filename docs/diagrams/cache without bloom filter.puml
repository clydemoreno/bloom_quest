@startuml

actor Client
participant "Backend API" as Backend
participant "External Cache Server" as Cache
participant "External Data Source" as DataSource

Client -> Backend: Send Request
Backend -> Cache: Check Cache
alt Cache Hit
    Cache --> Backend: Cached Data
    Backend -> Client: Respond with Cached Data
else Cache Miss
    Backend -> DataSource: Fetch Data
    DataSource --> Backend: Data Retrieved
    Backend -> Cache: Update Cache
    Cache --> Backend: Cache Updated
    Backend -> Client: Respond with Data from DataSource
end

@enduml


Certainly! Here's a PlantUML sequence diagram that describes the interactions without using a Bloom filter, allowing you to compare and contrast with the previous scenario:

@startuml

actor Client
participant "Backend API" as Backend
participant "External Cache Server" as Cache
participant "External Data Source" as DataSource

Client -> Backend: Send Request
Backend -> Cache: Check Cache
alt Cache Hit
    Cache --> Backend: Cached Data
    Backend --> Client: Respond with Cached Data
else Cache Miss
    Backend -> DataSource: Fetch Data
    DataSource --> Backend: Data Retrieved
    Backend -> Cache: Update Cache
    Cache --> Backend: Cache Updated
    Backend --> Client: Respond with Data from DataSource
end

@enduml

//www.plantuml.com/plantuml/png/ZPB1JiCm38RlUGfhzxr03zEWWE20XAXu02inQhIiBOaxU7mIrwYD46YNIlxprP-jv9WO8y_dO0nQ7YEqmTF0Pigfjtx2WM5tY_P4WuERbwSTO0AjQ-Z-YoaE6A15snDq52yK1PVW3_WE6Q4RvsX9s58lfJ7BAB0__0WRwCeOh_GnKsAZQG54qK3Rapsf3mFhA8-U3G1ejT_sayY9LH0z46ZHDrcNfZ5ddvxxwWSAYRJfiq-fRd3OhDB00x7jLyrwL8qZUVPnz7GX9-Zl9TycXwpYV_TIqbstcRZVutZUta6vPNFCt_92lW40

