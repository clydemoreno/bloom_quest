docker build -t my-own-mysql .
#run docker with mysql root password
docker run --name my-own-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -p 3306:3306 -d my-own-mysql
#get inside the docker
docker exec -it my-own-mysql /bin/bash
#run mysql client
mysql -u root -p
show databases;
show use mydb;
show tables
select * from ORDERS


#list all the docker names including those that are stopped
docker ps -a
docker ps -aq --format "{{.Names}}"


# copy files to docker
docker cp /path/on/host/file_or_directory <container_id_or_name>:/path/in/container/


#get grafana working 
#get influxdb

docker run -d --name=influxdb -p 8086:8086 -v $PWD/influxdb:/var/lib/influxdb influxdb

#if you want to stop and remove a container
docker stop influxdb
docker rm influxdb



Influxdb configuration
http://localhost:8086 webUI
user:influxdbuser
pw: admin123


flask 5000
grafana 3000
admin admin123 (default is admin pw)
influxdb  8086
org: 
mysql 3306


todo:
1. either download a mysql client
2. get it to work again using regular running the container.
3. remove the cotainer names again
4. create the sql script.
5. create a scheduled task in python that gets the list of all orders. returning the ids.
6. re-build the bloom filter
7. add to an array of bloomfilters.
8. The selector picks the latest bloomfilter based on timestamp
7. create a web api that will get the orders. 

to run mysql client inside db
docker exec -it 3a54ec603448 bash